package org.hanqim.mcpdict;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.hanqim.mcpdict.Mcp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MCP".
*/
public class McpDao extends AbstractDao<Mcp, Long> {

    public static final String TABLENAME = "MCP";

    /**
     * Properties of entity Mcp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Unicode = new Property(1, String.class, "unicode", false, "UNICODE");
        public final static Property Mc = new Property(2, String.class, "mc", false, "MC");
        public final static Property Pu = new Property(3, String.class, "pu", false, "PU");
        public final static Property Ct = new Property(4, String.class, "ct", false, "CT");
        public final static Property Sh = new Property(5, String.class, "sh", false, "SH");
        public final static Property Mn = new Property(6, String.class, "mn", false, "MN");
        public final static Property Vn = new Property(7, String.class, "vn", false, "VN");
        public final static Property Jp_go = new Property(8, String.class, "jp_go", false, "JP_GO");
        public final static Property Jp_kan = new Property(9, String.class, "jp_kan", false, "JP_KAN");
        public final static Property Jp_tou = new Property(10, String.class, "jp_tou", false, "JP_TOU");
        public final static Property Jp_kwan = new Property(11, String.class, "jp_kwan", false, "JP_KWAN");
        public final static Property Jp_other = new Property(12, String.class, "jp_other", false, "JP_OTHER");
    };


    public McpDao(DaoConfig config) {
        super(config);
    }
    
    public McpDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MCP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UNICODE\" TEXT NOT NULL ," + // 1: unicode
                "\"MC\" TEXT," + // 2: mc
                "\"PU\" TEXT," + // 3: pu
                "\"CT\" TEXT," + // 4: ct
                "\"SH\" TEXT," + // 5: sh
                "\"MN\" TEXT," + // 6: mn
                "\"VN\" TEXT," + // 7: vn
                "\"JP_GO\" TEXT," + // 8: jp_go
                "\"JP_KAN\" TEXT," + // 9: jp_kan
                "\"JP_TOU\" TEXT," + // 10: jp_tou
                "\"JP_KWAN\" TEXT," + // 11: jp_kwan
                "\"JP_OTHER\" TEXT);"); // 12: jp_other
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MCP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Mcp entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUnicode());
 
        String mc = entity.getMc();
        if (mc != null) {
            stmt.bindString(3, mc);
        }
 
        String pu = entity.getPu();
        if (pu != null) {
            stmt.bindString(4, pu);
        }
 
        String ct = entity.getCt();
        if (ct != null) {
            stmt.bindString(5, ct);
        }
 
        String sh = entity.getSh();
        if (sh != null) {
            stmt.bindString(6, sh);
        }
 
        String mn = entity.getMn();
        if (mn != null) {
            stmt.bindString(7, mn);
        }
 
        String vn = entity.getVn();
        if (vn != null) {
            stmt.bindString(8, vn);
        }
 
        String jp_go = entity.getJp_go();
        if (jp_go != null) {
            stmt.bindString(9, jp_go);
        }
 
        String jp_kan = entity.getJp_kan();
        if (jp_kan != null) {
            stmt.bindString(10, jp_kan);
        }
 
        String jp_tou = entity.getJp_tou();
        if (jp_tou != null) {
            stmt.bindString(11, jp_tou);
        }
 
        String jp_kwan = entity.getJp_kwan();
        if (jp_kwan != null) {
            stmt.bindString(12, jp_kwan);
        }
 
        String jp_other = entity.getJp_other();
        if (jp_other != null) {
            stmt.bindString(13, jp_other);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Mcp readEntity(Cursor cursor, int offset) {
        Mcp entity = new Mcp( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // unicode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pu
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ct
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sh
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mn
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vn
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // jp_go
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // jp_kan
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // jp_tou
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // jp_kwan
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // jp_other
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Mcp entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnicode(cursor.getString(offset + 1));
        entity.setMc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPu(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSh(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMn(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVn(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setJp_go(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setJp_kan(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setJp_tou(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setJp_kwan(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setJp_other(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Mcp entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Mcp entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
